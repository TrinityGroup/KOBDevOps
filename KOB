#!/bin/bash 

fun_vim_Fix()
{
	cd
	echo "set nocompatible" > /root/.vimrc

}
fun_menu()
{
	echo "************************************************************"
	echo "*The installation that can be performed by you:            *"
	echo "*         Requires (yes/no) input                          *"
	echo "*1)Ubuntu Update & Upgrade                                 *"
	echo "*2)Git                                                     *"
	echo "*3)Python                                                  *"
	echo "*4)Docker                                                  *"
	echo "*5)Docker Compose                                          *"
	echo "*6)VON Network Build                                       *"
	echo "*7)TOB Build                                               *"
	echo "*8)green light Build                                       *"
	echo "*9)Von Network Start-up                                    *"
	echo "*                                                          *"
	echo "************************************************************"

}
fun_ubuntu_upgrade()
{
	echo -e "\n\r***********************************";
	echo "*       Updating your OS?         *";
	echo "***********************************";

        echo "Updating system......";
        apt-get update -y
        apt-get upgrade -y

}	
fun_pre_req()
{
	echo "************************************************************"
	echo "*    Pre-Requesites listed below                          * "
	echo "************************************************************"
	echo "*                                                          *"
	echo "*- you are using Ubuntu Bionic 18.04 (LTS)                 *"
	echo "*  To install Docker Engine - Community                    *"
	echo "*- Login as root user                                      *"
	echo "*- Mininum 4GB RAM is required to set this env up          *"
	echo "*- No special character in password                        *"
	echo "************************************************************"

}
fun_check_proxy()
{
	read -p "Are you behind a corporate proxy?" reply
if [ "$reply" = "y" ] || [ "$reply" = "Y" ] || [ "$reply" = "yes" ] || [ "$reply" = "YES" ];

then
	proxychk=1
	echo "Proxy check = " $proxychk
        read -p "Enter the proxy?[eg: Kochin.dummy.com..etc] :" prox
        echo -e "\n"
	read -p "Enter the port?[eg :8080,443..etc]          :" port
        echo -e "\n"
	read -p "Enter AD ID? [eg :ai318974]                 :" uname
        read -s -p "Enter password?[your login password]        : " pword
        echo -e "\n"
	read -p "Enter email ID?                             :" emil
        unset http_proxy
        unset ftp_proxy
        unset https_proxy
        unset socks_proxy
        unset SOCKS_PROXY
        unset FTP_PROXY
        unset HTTPS_PROXY
        unset HTTP_PROXY

        for proto in http https ftp socks;
        do
                if [ "$proto" = "https" ];
                then
                  printf 'Acquire::%s::proxy "http://%s:%s@%s:%u/";\n' "$proto" "$uname" "$pword" "$prox" "$port"
                else
                        printf 'Acquire::%s::proxy "%s://%s:%s@%s:%u/";\n' "$proto" "$proto" "$uname" "$pword" "$prox" "$port"
                fi

        done | sudo tee -a /etc/apt/apt.conf > /dev/null
        mkdir -p /etc/systemd/system/docker.service.d/
 touch /etc/systemd/system/docker.service.d/https-proxy.conf
        echo -e "[Service]\nEnvironment="HTTPS_PROXY=http://${uname}:${pword}@${prox}:${port}"">>/etc/systemd/system/docker.service.d/https-proxy.conf

        export HTTPS_PROXY=http://${uname}:${pword}@${prox}:${port}/
        export HTTP_PROXY=http://${uname}:${pword}@${prox}:${port}/
        export FTP_PROXY=ftp://${uname}:${pword}@${prox}:${port}/
        export SOCKS_PROXY=socks://${uname}:${pword}@${prox}:${port}/

        export http_proxy=http://${uname}:${pword}@${prox}:${port}/
        export https_proxy=http://${uname}:${pword}@${prox}:${port}/
        export ftp_proxy=ftp://${uname}:${pword}@${prox}:${port}/
        export socks_proxy=socks://${uname}:${pword}@${prox}:${port}/

        echo "**********************"
        git config --global user.name "${uname}"
        git config --global user.email "${emil}"
        apt install ca-certificates
        git config --global http.sslVerify false
        git config --global http.proxy http://${uname}:${pword}@${prox}:${port}
else
        echo "skipping the proxy settings"
fi

}
fun_git_install()
{
	echo -e "\n\r**********************************";
	echo "*     Installing Git?            *";
	echo "**********************************";

        apt install git -y
        git --version

}
fun_python_install()
{
	echo -e "\n\r**********************************";
	echo "*      Installing Python?        *"
	echo "**********************************"
        apt install software-properties-common -y
        sudo -E add-apt-repository ppa:ubuntu-toolchain-r/ppa
        apt install Python3.7 -y
	apt install python-pip
	pip install --upgrade pip
	
}
fun_docker_install()
{
	echo "*  Uninstalling Exising Docker...*";
        echo "**********************************";

        sudo apt-get remove docker docker-engine docker-ce docker-ce-cli docker.io

        echo -e "\n\r**********************************";
        echo "*    Installing Docker...         *";
        echo -e "**********************************\n\n\r";
        apt-get update -y
        apt install docker.io
        systemctl start docker
        systemctl enable docker
        echo -e "\n\r************************************************************************";
        echo "*    Installing packages to allow apt to use a repository over HTTPS...   *";
        echo -e "*************************************************************************\n\n\r";



        apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common -y

        echo -e "\n\r******************************";
        echo "*    Add Dockers official GPG key... *";
        echo -e "*********************************\n\n\r";
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

        echo -e "\n\r***********************************************************";
        echo "*    Verifying that you now have the key with the fingerprint: *";
        echo -e "*********************************************************\n\n\r";
 apt-key fingerprint 0EBFCD88


        echo -e "\n\n\r**********************************";
        echo "*     setting up the stable repository...  *";
        echo "**********************************";
        lsb_release -cs
        add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs) stable"

        echo -e "\n\r**********************************";
        echo "*    Installing Docker Engine...*";
        echo "**********************************";
        apt-get update -y
        apt-get install docker-ce docker-ce-cli containerd.io -y
        docker run hello-world


	echo -e "\n\r***********************************";
	echo "*    Installing Docker Compose?   *";
	echo "***********************************";
        curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

        chmod +x /usr/local/bin/docker-compose
        echo -e "\n\r**********************************";
        echo "*     Docker & Docker compose Version     *";
        echo "**********************************";
        docker --version
        docker-compose --version
        echo -e "\n\r**********************************";
        echo -e "\n\r*    Docker Login                *"
	echo -e "\n\r**********************************";
	rm -rf /root/.docker/
        docker login
        if [ $proxychk -eq 1 ]
	then 
		sed -i '$ d' /root/.docker/config.json
		echo -e ",\n "\""proxies"\"": {\n\t "\""default"\"": {\n\t\t "\""httpProxy"\"": "\""http://${uname}:${pword}@${prox}:${port}"\"",\n\t\t "\""httpsProxy"\"": "\""https://${uname}:${pword}@${prox}:${port}"\"",\n\t\t "\""noProxy"\"": "\""localhost,127.0.0.0/8,*.local,host.docker.internal"\"" \n\t\t}\n\t}\n}">>/root/.docker/config.json
	fi

}
fun_npm_install()
{
	echo -e "\n\r***********************************";
	echo "*    Purging NPM Components              *";
	echo -e "\n\r***********************************";
	npm config rm proxy
	npm config rm proxy --global

	npm config rm https-proxy
	npm config rm https-proxy --global

	npm config rm registry
	npm cache clean

	sudo apt-get remove nodejs nodejs-dev node-gyp libssl1.0-dev npm
	echo "Ignore!! these errors"

	echo -e "\n\r***********************************";
	echo "*    Installing NPM Components              *";
	echo -e "\n\r***********************************";

	sudo apt-get install nodejs nodejs-dev node-gyp libssl1.0-dev npm

	npm config set https-proxy http://${uname}:${pword}@${prox}:${port}--global
	npm config set https-proxy http://${uname}:${pword}@${prox}:${port}

	npm config set proxy http://${uname}:${pword}@${prox}:${port}--global
	npm config set proxy http://${uname}:${pword}@${prox}:${port}

	npm config set registry http://registry.npmjs.org
	npm config set strict-ssl false

}
fun_von_build()
{
	read -p "Do you want to build KOB-Von instance in your system?" reply
        if [ "$reply" = "y" ] || [ "$reply" = "Y" ] || [ "$reply" = "yes" ] || [ "$reply" = "YES" ];
        then
                git clone https://github.com/hyperledgerkochi/von-network.git
                /home/KOB/von-network/manage rm
                /home/KOB/von-network/manage build
        fi
	
}
fun_von_start()
{
	read -p "Do you want to start KOB VON instance in your system?" reply
        if [ "$reply" = "y" ] || [ "$reply" = "Y" ] || [ "$reply" = "yes" ] || [ "$reply" = "YES" ];
        then
	/home/KOB/von-network/manage start
fi
}	
fun_kob_build()
{
	read -p "Do you want to setup KOB instance in your system?" reply
        if [ "$reply" = "y" ] || [ "$reply" = "Y" ] || [ "$reply" = "yes" ] || [ "$reply" = "YES" ];
        then


                git clone https://github.com/hyperledgerkochi/TheOrgBook.git
                wget https://github.com/openshift/source-to-image/releases/download/v1.1.14/source-to-image-v1.1.14-874754de-linux-amd64.tar.gz
                tar -xvzf source-to-image-v1.1.14-874754de-linux-amd64.tar.gz
                mv s2i sti /usr/local/bin/
                /home/KOB/TheOrgBook/docker/manage rm
                /home/KOB/TheOrgBook/docker/manage build
		sed -i -e 's/- 3000/- 3100/g' /home/KOB/TheOrgBook/docker/docker-compose.yml
        fi


}
fun_kob_start()
{
read -p "Do you want to start KOB instance in your system?" reply
        if [ "$reply" = "y" ] || [ "$reply" = "Y" ] || [ "$reply" = "yes" ] || [ "$reply" = "YES" ];
        then
	/home/KOB/TheOrgBook/docker/manage start seed=the_org_book_0000000000000000000
	fi
}
fun_Dflow_build()
{
	#KOB-DFlow
read -p "Do you want to setup GreenLight instance in your system?" reply
        if [ "$reply" = "y" ] || [ "$reply" = "Y" ] || [ "$reply" = "yes" ] || [ "$reply" = "YES" ];
        then

                git clone https://github.com/hyperledgerkochi/greenlight.git
                wget https://github.com/openshift/source-to-image/releases/download/v1.1.14/source-to-image-v1.1.14-874754de-linux-amd64.tar.gz
                tar -xvzf source-to-image-v1.1.14-874754de-linux-amd64.tar.gz
                mv s2i sti /usr/local/bin/
                /home/KOB/greenlight/docker/manage rm
                /home/KOB/greenlight/docker/manage build

        fi

		
}

fun_Dflow_start()
{
	read -p "Do you want to setup GreenLight instance in your system?" reply
        if [ "$reply" = "y" ] || [ "$reply" = "Y" ] || [ "$reply" = "yes" ] || [ "$reply" = "YES" ];
        then
		/home/KOB/greenlight/docker/manage start 
	fi
}


######################################################################



ONE=$1
TWO=$2
THREE=$3


if [ "$ONE" = "install" ]
then
        case $TWO in
               --dev)
                        if [ "$THREE" = "All" ]
                        then
                                echo "install all the dev environment to do development"
				fun_check_proxy
		                fun_ubuntu_upgrade
                		fun_git_install
		                fun_python_install
		                fun_docker_install
               			fun_npm_install
		                apt-get -y install build-essential nghttp2 libnghttp2-dev libssl-dev
		                mkdir -p /home/KOB
		                cd /home/KOB

                        elif [ $THREE = "KOBVON" ]
                        then
                                echo "to install just the KOBVON project for development"
				fun_check_proxy
		                fun_ubuntu_upgrade
		                fun_git_install
		                fun_python_install
		                fun_docker_install
		                fun_npm_install
		                apt-get -y install build-essential nghttp2 libnghttp2-dev libssl-dev
		                mkdir -p /home/KOB
		                cd /home/KOB
		                fun_von_build
                        else
                                echo "INvalid Command"
                        fi
                ;;
                KOBVON)
                        echo "Deploy KOBVON for testing"
			fun_check_proxy
	                fun_ubuntu_upgrade
	                fun_git_install
	                fun_python_install
	                fun_docker_install
	                fun_npm_install
	                apt-get -y install build-essential nghttp2 libnghttp2-dev libssl-dev
	                mkdir -p /home/KOB
	                cd /home/KOB
	                fun_von_build
	                fun_von_start

                ;;
                *)
                        if [ -z $TWO ]
                        then
                                echo "Install default projects i.e KOBVON, KOBDflow,KOBConnect, KOBRegistry, TheKochOrgBook"
				
                		fun_check_proxy
		                fun_ubuntu_upgrade
                		fun_git_install
		                fun_python_install
                		fun_docker_install
		                fun_npm_install
                		apt-get -y install build-essential nghttp2 libnghttp2-dev libssl-dev
		                mkdir -p /home/KOB
                		cd /home/KOB
		                fun_von_build
                		fun_kob_build
		                fun_Dflow_build

                        fi
                ;;
        esac
fi



#	fun_pre_req
#	fun_vim_Fix
#	fun_check_proxy
#	fun_ubuntu_upgrade
#	fun_git_install
#	fun_python_install
#	fun_docker_install
#	fun_npm_install
#	apt-get -y install build-essential nghttp2 libnghttp2-dev libssl-dev
#	mkdir -p /home/KOB
#	cd /home/KOB
#	fun_von_build
#	fun_kob_build
#	fun_Dflow_build
